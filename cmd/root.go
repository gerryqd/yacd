package cmd

import (
	"fmt"
	"os"

	"github.com/spf13/cobra"
)

var (
	inputFile        string
	outputFile       string
	useRelativePaths bool
	baseDir          string
	verbose          bool
	makeCommand      string
)

// rootCmd root command
var rootCmd = &cobra.Command{
	Use:   "yacd",
	Short: "Yet Another CompileDB - Generate compile_commands.json from make logs",
	Long: `yacd (Yet Another CompileDB) is a tool for generating compile_commands.json
files from make logs of makefile projects.

This tool can parse log files generated by 'make -Bnkw' commands, extract
compilation command information, and generate compile_commands.json files
that comply with Language Server Protocol standards.

Usage examples:
  yacd -i build.log -o compile_commands.json
  yacd --input make.log --output ./compile_commands.json --verbose
  yacd -i build.log -o compile_commands.json --relative --base-dir /project/root
  yacd -n make --output compile_commands.json --verbose
  yacd --dry-run "make clean all" --output compile_commands.json
  yacd < build.log -o compile_commands.json
  make -Bnkw | yacd -o compile_commands.json`,
	RunE: runGenerate,
}

// Execute executes the root command
func Execute() {
	if err := rootCmd.Execute(); err != nil {
		fmt.Fprintf(os.Stderr, "Error: %v\n", err)
		os.Exit(1)
	}
}

func init() {
	rootCmd.Flags().StringVarP(&inputFile, "input", "i", "", "Input make log file path")
	rootCmd.Flags().StringVarP(&outputFile, "output", "o", "compile_commands.json", "Output compile_commands.json file path")
	rootCmd.Flags().BoolVarP(&useRelativePaths, "relative", "r", false, "Use relative paths instead of absolute paths")
	rootCmd.Flags().StringVarP(&baseDir, "base-dir", "b", "", "Base directory path (used with --relative)")
	rootCmd.Flags().BoolVarP(&verbose, "verbose", "v", false, "Verbose output")
	rootCmd.Flags().StringVarP(&makeCommand, "dry-run", "n", "", "Execute make command with -Bnkw flags and process output directly")

	// Mark mutually exclusive parameters
	rootCmd.MarkFlagsMutuallyExclusive("input", "dry-run")
}

// runGenerate executes the generation operation
func runGenerate(cmd *cobra.Command, args []string) error {
	// Check if no input is provided and show help instead of error
	stdinHasData := HasStdinData()
	if inputFile == "" && makeCommand == "" && !stdinHasData {
		// Show help information instead of error when no input is provided
		cmd.Help()
		return nil
	}

	// Validate input sources
	if err := ValidateInputSources(inputFile, makeCommand, stdinHasData); err != nil {
		return err
	}

	// Prepare options
	options, err := PrepareOptions(inputFile, outputFile, makeCommand, baseDir, useRelativePaths, verbose)
	if err != nil {
		return err
	}

	// Prepare reader
	reader, cleanup, err := PrepareReader(options, stdinHasData)
	if err != nil {
		return err
	}
	defer cleanup()

	// Execute generation
	return ExecuteGeneration(options, reader)
}
